{"version":3,"file":"save_form_values.js","sources":["src/js/save_form_values.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', (event) => {\n    const form = document.getElementById('attribute-form');\n\n    const defaultFormValues = {\n        \"attack\": 100000,\n        \"attack_amplifier\": 32,\n        \"crit\": 10000,\n        \"crit_rate\": 32,\n        \"crit_dmg\": 0,\n        \"break_rate\": 50,\n        \"dmg_increase\": 10,\n        \"pvp_dmg_increase\": 12,\n        \"pierce_rate\": 50,\n        \"target_player\": \"shionne\",\n        \"save_form_vals\": \"off\"\n    };\n\n    let storedFormData = JSON.parse(localStorage.getItem(\"formData\"));\n    if (storedFormData === null) {\n        storedFormData = defaultFormValues;\n    }\n    else {\n        for (const key of Object.keys(defaultFormValues)) {\n            if (!storedFormData.hasOwnProperty(key)) {\n                storedFormData[key] = defaultFormValues[key];\n            }\n        }\n    }\n    \n    // Load saved values\n    const formData = storedFormData\n    \n    for (const [key, value] of Object.entries(formData)) {\n        if (form.elements[key]) {\n            if (form.elements[key].type === 'checkbox') {\n                form.elements[key].checked = (value === \"on\");\n            } else {\n                form.elements[key].value = value;\n            }\n        }\n    }\n    \n    form.addEventListener('submit', (event) => {\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n\n        if(data[\"save_form_vals\"] === \"on\") {\n            const serializedData = JSON.stringify(data);\n            localStorage.setItem(\"formData\", serializedData);\n        } else {\n            localStorage.removeItem(\"formData\");\n        }\n    });\n});"],"names":["document","addEventListener","event","form","getElementById","defaultFormValues","storedFormData","JSON","parse","localStorage","getItem","_i","_Object$keys","Object","keys","length","key","hasOwnProperty","formData","_i2","_Object$entries","entries","_Object$entries$_i","_slicedToArray","value","elements","type","checked","FormData","data","fromEntries","serializedData","stringify","setItem","removeItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,UAACC,KAAK,EAAK;IACrD,IAAMC,IAAI,GAAGH,QAAQ,CAACI,cAAc,CAAC,gBAAgB,CAAC;IAEtD,IAAMC,iBAAiB,GAAG;MACtB,QAAQ,EAAE,MAAM;MAChB,kBAAkB,EAAE,EAAE;MACtB,MAAM,EAAE,KAAK;MACb,WAAW,EAAE,EAAE;MACf,UAAU,EAAE,CAAC;MACb,YAAY,EAAE,EAAE;MAChB,cAAc,EAAE,EAAE;MAClB,kBAAkB,EAAE,EAAE;MACtB,aAAa,EAAE,EAAE;MACjB,eAAe,EAAE,SAAS;MAC1B,gBAAgB,EAAE;KACrB;IAED,IAAIC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;IACjE,IAAIJ,cAAc,KAAK,IAAI,EAAE;MACzBA,cAAc,GAAGD,iBAAiB;KACrC,MACI;MACD,SAAAM,EAAA,MAAAC,YAAA,GAAkBC,MAAM,CAACC,IAAI,CAACT,iBAAiB,CAAC,EAAAM,EAAA,GAAAC,YAAA,CAAAG,MAAA,EAAAJ,EAAA,IAAE;QAA7C,IAAMK,GAAG,GAAAJ,YAAA,CAAAD,EAAA;QACV,IAAI,CAACL,cAAc,CAACW,cAAc,CAACD,GAAG,CAAC,EAAE;UACrCV,cAAc,CAACU,GAAG,CAAC,GAAGX,iBAAiB,CAACW,GAAG,CAAC;;;;;;IAMxD,IAAME,QAAQ,GAAGZ,cAAc;IAE/B,SAAAa,GAAA,MAAAC,eAAA,GAA2BP,MAAM,CAACQ,OAAO,CAACH,QAAQ,CAAC,EAAAC,GAAA,GAAAC,eAAA,CAAAL,MAAA,EAAAI,GAAA,IAAE;MAAhD,IAAAG,kBAAA,GAAAC,cAAA,CAAAH,eAAA,CAAAD,GAAA;QAAOH,IAAG,GAAAM,kBAAA;QAAEE,KAAK,GAAAF,kBAAA;MAClB,IAAInB,IAAI,CAACsB,QAAQ,CAACT,IAAG,CAAC,EAAE;QACpB,IAAIb,IAAI,CAACsB,QAAQ,CAACT,IAAG,CAAC,CAACU,IAAI,KAAK,UAAU,EAAE;UACxCvB,IAAI,CAACsB,QAAQ,CAACT,IAAG,CAAC,CAACW,OAAO,GAAIH,KAAK,KAAK,IAAK;SAChD,MAAM;UACHrB,IAAI,CAACsB,QAAQ,CAACT,IAAG,CAAC,CAACQ,KAAK,GAAGA,KAAK;;;;IAK5CrB,IAAI,CAACF,gBAAgB,CAAC,QAAQ,EAAE,UAACC,KAAK,EAAK;MACvC,IAAMgB,QAAQ,GAAG,IAAIU,QAAQ,CAACzB,IAAI,CAAC;MACnC,IAAM0B,IAAI,GAAGhB,MAAM,CAACiB,WAAW,CAACZ,QAAQ,CAACG,OAAO,EAAE,CAAC;MAEnD,IAAGQ,IAAI,CAAC,gBAAgB,CAAC,KAAK,IAAI,EAAE;QAChC,IAAME,cAAc,GAAGxB,IAAI,CAACyB,SAAS,CAACH,IAAI,CAAC;QAC3CpB,YAAY,CAACwB,OAAO,CAAC,UAAU,EAAEF,cAAc,CAAC;OACnD,MAAM;QACHtB,YAAY,CAACyB,UAAU,CAAC,UAAU,CAAC;;KAE1C,CAAC;EACN,CAAC,CAAC;;;;"}